// jsconfig.json
{
  "compilerOptions": {
    "baseUrl": "src",
    "paths": {
      "@/*": ["*"]
    }
  }
}

// src/context/ThemeContext.jsx
import React, { createContext, useContext, useState } from 'react';

const ThemeContext = createContext();

export const useTheme = () => useContext(ThemeContext);

export const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState('adventure');
  const toggleTheme = (newTheme) => setTheme(newTheme);

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

// src/context/DarkModeContext.jsx
import React, { createContext, useContext, useState, useEffect } from 'react';

const DarkModeContext = createContext();

export const useDarkMode = () => useContext(DarkModeContext);

export const DarkModeProvider = ({ children }) => {
  const [darkMode, setDarkMode] = useState(() => {
    return localStorage.getItem('darkMode') === 'true';
  });

  useEffect(() => {
    localStorage.setItem('darkMode', darkMode);
    document.documentElement.classList.toggle('dark', darkMode);
  }, [darkMode]);

  return (
    <DarkModeContext.Provider value={{ darkMode, setDarkMode }}>
      {children}
    </DarkModeContext.Provider>
  );
};

// src/context/CurrencyContext.jsx
import React, { createContext, useContext, useState } from 'react';

const CurrencyContext = createContext();

export const useCurrency = () => useContext(CurrencyContext);

export const CurrencyProvider = ({ children }) => {
  const [currency, setCurrency] = useState('USD');
  return (
    <CurrencyContext.Provider value={{ currency, setCurrency }}>
      {children}
    </CurrencyContext.Provider>
  );
};

// src/components/Navbar.jsx
import React from 'react';
import { useTheme } from '@/context/ThemeContext';
import { useDarkMode } from '@/context/DarkModeContext';
import { useCurrency } from '@/context/CurrencyContext';

export default function Navbar() {
  const { theme, toggleTheme } = useTheme();
  const { darkMode, setDarkMode } = useDarkMode();
  const { currency, setCurrency } = useCurrency();

  return (
    <nav className="flex justify-between items-center p-4 bg-white dark:bg-gray-800 shadow">
      <h1 className="text-xl font-bold">üè† Rent Rhythm</h1>
      <div className="flex gap-4 items-center">
        <select
          value={theme}
          onChange={(e) => toggleTheme(e.target.value)}
          className="p-1 rounded"
        >
          <option value="adventure">Adventure</option>
          <option value="forest">Forest</option>
          <option value="city">City</option>
        </select>

        <select
          value={currency}
          onChange={(e) => setCurrency(e.target.value)}
          className="p-1 rounded"
        >
          <option value="USD">$ USD</option>
          <option value="GBP">¬£ GBP</option>
          <option value="EUR">‚Ç¨ EUR</option>
        </select>

        <button
          onClick={() => setDarkMode(!darkMode)}
          className="p-1 text-lg"
        >
          {darkMode ? '‚òÄÔ∏è' : 'üåô'}
        </button>
      </div>
    </nav>
  );
}

// src/components/ThemeDisplay.jsx
import React from 'react';
import { useTheme } from '@/context/ThemeContext';

export default function ThemeDisplay() {
  const { theme } = useTheme();

  const mascots = {
    adventure: { bg: '/adventure.png', mascot: '/fox.png', message: 'Let‚Äôs go on an adventure!' },
    forest: { bg: '/forest.png', mascot: '/squirrel.png', message: 'Time to gather and grow!' },
    city: { bg: '/city.png', mascot: '/pigeon.png', message: 'Fly smart through your finances!' }
  };

  return (
    <div className="mt-4 flex flex-col items-center">
      <img
        src={mascots[theme].bg}
        alt="Theme background"
        className="w-full max-w-xl rounded-xl shadow-md mb-4"
      />
      <div className="text-center">
        <img
          src={mascots[theme].mascot}
          alt="Mascot"
          className="w-24 h-24 mx-auto animate-bounce"
        />
        <p className="text-sm mt-1 italic">{mascots[theme].message}</p>
      </div>
    </div>
  );
} // updated with animated mascot

// src/components/ProgressFeedback.jsx (unchanged)
// src/components/CategoryTracker.jsx (unchanged)
// src/components/TotalBudgetSummary.jsx (unchanged)
// src/App.jsx (unchanged)

// Images required: /fox.png, /squirrel.png, /pigeon.png in public folder
